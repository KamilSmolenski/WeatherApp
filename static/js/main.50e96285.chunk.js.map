{"version":3,"sources":["svg/001-evening.svg","svg/002-sunset.svg","svg/003-pressure.svg","svg/004-humidity.svg","svg/005-wind.svg","svg/002-therm-min.svg","svg/001-therm-max.svg","svg/calendar.svg","components/Results.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Results","props","currentWeather","time","weekDay","date","city","sunrise","sunset","wind","pressure","humidity","temp","min","max","description","error","iconUrl","res","sunsetTime","Date","getHours","getMinutes","sunriseTime","className","src","alt","calendar","thermmin","thermmax","evening","suns","win","humid","press","Math","round","Search","type","value","placeholder","onChange","change","App","state","iconId","forecast","handleSearchChange","e","setState","target","this","prevProps","prevState","WeekDays","WeekDaysIndex","getDay","length","API","fetch","then","response","ok","Error","status","json","data","console","log","currentTime","currentDate","toLocaleDateString","windSpeed","speed","windSpeedInteger","weather","capitalize","s","charAt","toUpperCase","slice","main","temp_min","temp_max","sys","icon","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.50e96285.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/001-evening.53ceeee2.svg\";","module.exports = __webpack_public_path__ + \"static/media/002-sunset.913dfb7e.svg\";","module.exports = __webpack_public_path__ + \"static/media/003-pressure.5f043128.svg\";","module.exports = __webpack_public_path__ + \"static/media/004-humidity.f7efb53c.svg\";","module.exports = __webpack_public_path__ + \"static/media/005-wind.9737c2a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/002-therm-min.52d15c62.svg\";","module.exports = __webpack_public_path__ + \"static/media/001-therm-max.a5470bdd.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.a4b07a41.svg\";","import React from \"react\";\r\nimport \"./Results.scss\";\r\nimport evening from \"..//svg/001-evening.svg\";\r\nimport suns from \"..//svg/002-sunset.svg\";\r\nimport press from \"..//svg/003-pressure.svg\";\r\nimport humid from \"..//svg/004-humidity.svg\";\r\nimport win from \"..//svg/005-wind.svg\";\r\nimport thermmin from \"..//svg/002-therm-min.svg\";\r\nimport thermmax from \"..//svg/001-therm-max.svg\";\r\nimport calendar from \"..//svg/calendar.svg\";\r\nconst Results = props => {\r\n  const {\r\n    time,\r\n    weekDay,\r\n    date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    wind,\r\n    pressure,\r\n    humidity,\r\n    temp,\r\n    min,\r\n    max,\r\n    description,\r\n    error,\r\n    iconUrl,\r\n  } = props.currentWeather;\r\n\r\n  let res = null;\r\n\r\n  if (!error && city) {\r\n    const sunsetTime = `${\r\n      new Date(sunset * 1000).getHours() < 10\r\n        ? \"0\" + new Date(sunset * 1000).getHours()\r\n        : new Date(sunset * 1000).getHours()\r\n    }:${\r\n      new Date(sunset * 1000).getMinutes() < 10\r\n        ? \"0\" + new Date(sunset * 1000).getMinutes()\r\n        : new Date(sunset * 1000).getMinutes()\r\n    }`;\r\n    const sunriseTime = `${\r\n      new Date(sunrise * 1000).getHours() < 10\r\n        ? \"0\" + new Date(sunrise * 1000).getHours()\r\n        : new Date(sunrise * 1000).getHours()\r\n    }:${\r\n      new Date(sunrise * 1000).getMinutes() < 10\r\n        ? \"0\" + new Date(sunrise * 1000).getMinutes()\r\n        : new Date(sunrise * 1000).getMinutes()\r\n    }`;\r\n\r\n    res = (\r\n      <div className=\"Results\">\r\n        <div className=\"Results__Main\">\r\n          <h1>\r\n            <img src={iconUrl} alt=\"Current weather icon\" />\r\n            <p>{city}</p>\r\n            <p>{temp}&#176;C</p>\r\n          </h1>\r\n          <h1>{time}</h1>\r\n          <h1> {description}</h1>\r\n        </div>\r\n        <div className=\"Results__Details\">\r\n          <div className=\"Results__Details-Item\">\r\n            <img src={calendar} alt=\"calendar icon\" />\r\n            <h3>\r\n              {date} {weekDay}\r\n            </h3>\r\n          </div>\r\n          <div className=\"Results__Details-Item\">\r\n            <img src={thermmin} alt=\"thermomether-min icon\" />\r\n            <h3>{min}&#176;C</h3>\r\n          </div>\r\n          <div className=\"Results__Details-Item\">\r\n            <img src={thermmax} alt=\"thermomether-max icon\" />\r\n            <h3>{max}&#176;C</h3>\r\n          </div>\r\n          <div className=\"Results__Details-Item\">\r\n            <img src={evening} alt=\"\" />\r\n            <h3>{sunriseTime}</h3>\r\n          </div>\r\n\r\n          <div className=\"Results__Details-Item\">\r\n            <img src={suns} alt=\"sunset icon\" />\r\n            <h3>{sunsetTime}</h3>\r\n          </div>\r\n          <div className=\"Results__Details-Item\">\r\n            <img src={win} alt=\"wind icon\" />\r\n            <h3>{wind}</h3>\r\n          </div>\r\n          <div className=\"Results__Details-Item\">\r\n            <img src={humid} alt=\"humidity icon\" />\r\n            <h3>{humidity} % </h3>\r\n          </div>\r\n          <div className=\"Results__Details-Item\">\r\n            <img src={press} alt=\"pressure icon\" />\r\n            <h3>{Math.round(pressure)} hPa</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"results\">{error ? `Not found      ${city}` : res}</div>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React from \"react\";\r\nimport \"./Search.scss\";\r\nconst Search = props => {\r\n  return (\r\n    <div className=\"SearchPanel\">\r\n      <h1>Get current weather </h1>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          value={props.value}\r\n          placeholder=\"Find a city\"\r\n          onChange={props.change}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Results from \"./Results\";\nimport Search from \"./Search\";\n\nclass App extends Component {\n  state = {\n    city: \"\",\n    value: \"\",\n    time: \"\",\n    humidity: \"\",\n    max: \"\",\n    min: \"\",\n    weekDay: \"\",\n    date: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    wind: \"\",\n    pressure: \"\",\n    temp: \"\",\n    description: \"\",\n    iconId: \"\",\n    iconUrl: \"\",\n    error: false,\n    forecast: {\n      temp: \"100\",\n    },\n  };\n\n  handleSearchChange = e => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  componentDidMount() {\n    this.setState({\n      value: \"Warsaw\",\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const WeekDays = [\"Sun.\", \"Mon.\", \"Tue.\", \"Wed.\", \"Thu.\", \"Fri.\", \"Sat.\"];\n    const WeekDaysIndex = new Date().getDay();\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value) {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=cd2719d19d08b2909c6be691a47dad9c&units=metric`;\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(`number ${response.status}`);\n        })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data);\n          const currentTime = `${\n            new Date().getHours() < 10\n              ? \"0\" + new Date().getHours()\n              : new Date().getHours()\n          }:${\n            new Date().getMinutes() < 10\n              ? \"0\" + new Date().getMinutes()\n              : new Date().getMinutes()\n          }`;\n          const currentDate = new Date().toLocaleDateString();\n          const windSpeed = data.wind.speed * 3.6;\n          const windSpeedInteger = Math.round(windSpeed);\n          let description = data.weather[0].description;\n          const capitalize = s => {\n            return s.charAt(0).toUpperCase() + s.slice(1);\n          };\n          console.log(data);\n          this.setState({\n            error: false,\n            weekDay: WeekDays[WeekDaysIndex],\n            time: currentTime,\n            date: currentDate,\n            humidity: data.main.humidity,\n            min: data.main.temp_min,\n            max: data.main.temp_max,\n            city: capitalize(this.state.value),\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            wind: windSpeedInteger + \" km/h\",\n            pressure: data.main.pressure,\n            temp: Math.round(data.main.temp),\n            description: capitalize(description),\n            iconId: data.weather[0].icon,\n          });\n          this.setState({\n            iconUrl: ` http://openweathermap.org/img/wn/${this.state.iconId}@2x.png`,\n          });\n        })\n        .catch(err => {\n          this.setState({\n            error: true,\n            city: this.state.value,\n          });\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Search value={this.state.value} change={this.handleSearchChange} />\n        <Results currentWeather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}