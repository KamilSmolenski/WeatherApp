{"version":3,"sources":["components/Results.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Results","props","currentWeather","date","city","sunrise","sunset","wind","pressure","temp","error","content","sunsetTime","Date","toLocaleTimeString","sunriseTime","className","Search","type","value","placeholder","onChange","change","App","state","handleSearchChange","e","setState","target","prevProps","prevState","this","length","API","fetch","then","response","ok","Error","status","json","data","currentTime","toLocaleString","sys","speed","main","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAqCeA,G,YAlCC,SAAAC,GAAU,IAAD,EAUnBA,EAAMC,eARRC,EAFqB,EAErBA,KACAC,EAHqB,EAGrBA,KACAC,EAJqB,EAIrBA,QACAC,EALqB,EAKrBA,OACAC,EANqB,EAMrBA,KACAC,EAPqB,EAOrBA,SACAC,EARqB,EAQrBA,KACAC,EATqB,EASrBA,MAGEC,EAAU,KACd,IAAKD,GAASN,EAAM,CAClB,IAAMQ,EAAa,IAAIC,KAAc,IAATP,GAAeQ,qBACrCC,EAAc,IAAIF,KAAe,IAAVR,GAAgBS,qBAE7CH,EACE,yBAAKK,UAAU,WACb,qCACQ,gCAASZ,IAEjB,4BAAKD,GACL,oCAAUM,EAAV,UACA,wCAAcM,GACd,uCAAaH,GACb,oCAAUL,GACV,wCAAcC,EAAd,SAIN,OAAO,yBAAKQ,UAAU,WAAWN,EAAK,oBAAgBN,GAASO,KCpBlDM,EAbA,SAAAhB,GACb,OACE,8BACE,2BACEiB,KAAK,OACLC,MAAOlB,EAAMkB,MACbC,YAAY,cACZC,SAAUpB,EAAMqB,WC6DTC,E,2MA/DbC,MAAQ,CACNL,MAAO,GACPhB,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,MAAO,S,EAGTe,mBAAqB,SAAAC,GACnB,EAAKC,SAAS,CACZR,MAAOO,EAAEE,OAAOT,S,kFAGAU,EAAWC,GAAY,IAAD,OACxC,GAAgC,IAA5BC,KAAKP,MAAML,MAAMa,QACjBF,EAAUX,QAAUY,KAAKP,MAAML,MAAO,CACxC,IAAMc,EAAG,2DACPF,KAAKP,MAAML,MADJ,wDAGTe,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,UAAD,OAAWF,EAASG,YAEhCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASI,UAC1BL,MAAK,SAAAM,GACJ,IAAMC,GAAc,IAAI7B,MAAO8B,iBAC/B,EAAKhB,SAAS,CACZjB,OAAO,EACPP,KAAMuC,EACNtC,KAAM,EAAKoB,MAAML,MACjBd,QAASoC,EAAKG,IAAIvC,QAClBC,OAAQmC,EAAKG,IAAItC,OACjBC,KAAMkC,EAAKlC,KAAKsC,MAChBrC,SAAUiC,EAAKK,KAAKtC,SACpBC,KAAMgC,EAAKK,KAAKrC,UAGnBsC,OAAM,SAAAC,GACL,EAAKrB,SAAS,CACZjB,OAAO,EACPN,KAAM,EAAKoB,MAAML,c,+BAOzB,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,CAAQG,MAAOY,KAAKP,MAAML,MAAOG,OAAQS,KAAKN,qBAC9C,kBAAC,EAAD,CAASvB,eAAgB6B,KAAKP,a,GA1DpByB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.cdea6b76.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Results.css'\r\n\r\nconst Results = props => {\r\n  const {\r\n    date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    wind,\r\n    pressure,\r\n    temp,\r\n    error\r\n  } = props.currentWeather\r\n\r\n  let content = null\r\n  if (!error && city) {\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\r\n\r\n    content = (\r\n      <div className='Results'>\r\n        <h3>\r\n          City: <strong>{city}</strong>\r\n        </h3>\r\n        <h4>{date}</h4>\r\n        <h4>Temp:{temp} &#176;C</h4>\r\n        <h4>Sunrise: {sunriseTime}</h4>\r\n        <h4>Sunset: {sunsetTime}</h4>\r\n        <h4>Wind:{wind}</h4>\r\n        <h4>Pressure:{pressure} hPa</h4>\r\n      </div>\r\n    )\r\n  }\r\n  return <div className='results'>{error ? `Not found ${city}` : content}</div>\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\nconst Search = props => {\r\n  return (\r\n    <form>\r\n      <input\r\n        type='text'\r\n        value={props.value}\r\n        placeholder='Find a city'\r\n        onChange={props.change}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Results from './Results'\nimport Search from './Search'\n\nclass App extends Component {\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    wind: '',\n    pressure: '',\n    temp: '',\n    error: 'false'\n  }\n\n  handleSearchChange = e => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n  componentDidUpdate (prevProps, prevState) {\n    if (this.state.value.length === 0) return\n    if (prevState.value !== this.state.value) {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.value\n      }&APPID=cd2719d19d08b2909c6be691a47dad9c&units=metric`\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error(`number ${response.status}`)\n        })\n        .then(response => response.json())\n        .then(data => {\n          const currentTime = new Date().toLocaleString()\n          this.setState({\n            error: false,\n            date: currentTime,\n            city: this.state.value,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            wind: data.wind.speed,\n            pressure: data.main.pressure,\n            temp: data.main.temp\n          })\n        })\n        .catch(err => {\n          this.setState({\n            error: true,\n            city: this.state.value\n          })\n        })\n    }\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <Search value={this.state.value} change={this.handleSearchChange} />\n        <Results currentWeather={this.state} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}